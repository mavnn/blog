#+TITLE: Mavnn's blog

* Short term help
:PROPERTIES:
:RSS_PERMALINK: 2024/01/29/short_term_help.html
:PUBDATE: 2024-01-29
:ID:       C836CB9F-9ABB-4106-8D11-33E67B8C69A6
:END:
These days I generally work longer term contracts, which means I'm not often available for the more immediate "pay money for a solved problem" services I could offer while I was consulting. Right now though, I'm between long term contracts.

"But Michael," I hear you say, "what problems can I give you money to solve so that I can avoid distracting my own amazing team from actually *building the product*?"

I'm so glad you asked. Or, you know, you can just skip straight to the [[Logistics][logistics]] section if you already know what you want.

#+toc: headlines 2

** Consulting
:PROPERTIES:
:ID:       46766A32-52AB-4654-AB3D-DB4657953B0A
:END:

** Build, packaging, and continuous integration
:PROPERTIES:
:ID:       8FD25D59-031C-438A-8623-FB1F7DFF0E82
:END:

I have spent a /lot/ of time getting build, test, and deployment pipelines up and running. Most of the advice out there assumes that you are using one technology and you can just use "the build tool" for that stack. Reality tends to be more complicated than that, with many projects involving multiple languages, code generation, and extensive test set up.

What kind of things could your CI/CD process do for you? It depends on /your/ needs, but things that have really helped in other places include:

** Making sure that CI/CD is managed *in the code repository* so that running the build locally and on the build server does the same thing in the same way, and the build can evolve in a safe, version controlled way just like the rest of your code
:PROPERTIES:
:ID:       3DC0A3CB-AD7D-4587-B434-FE8CBAD8E185
:END:
** Helping trace and encode the /real/ dependencies in your code base to unlock incremental, cachable build steps and reduce overall build times with concurrency
:PROPERTIES:
:ID:       A11F7AFF-63F4-4DD1-9EFF-2D3AA2086BE3
:END:
** Split your test suite so tests can be run in parallel (yes, even integration tests) and then aggregate the results
:PROPERTIES:
:ID:       5DBE2661-8F7A-406D-8E5E-7EBFC6DC39AA
:END:
** Use tools like Nix or multi-step docker/podman builds to create minimal containers that only contain what they really need
:PROPERTIES:
:ID:       53AB76DB-D260-435F-B580-15738E1B91D9
:END:
*** bonus extra: doing this with Nix also gives you development environments as code and reproducible deployment artifacts - same code in, same container out
:PROPERTIES:
:ID:       3AD1BC7C-449E-4BD9-8594-2CFA40A5A10B
:END:

If this is a new product/project and you just want someone to make all these considerations go away I can also build you [[*Build a project skeleton][a project skeleton]] with everything set up and ready to go for your preferred CI provider and deployment environment.

** Architecture review
:PROPERTIES:
:ID:       66D42273-20E9-4571-9E3E-2437E9173D2B
:END:

Putting together a new project, or have a code base that's moving from "minimum viable" to "oh - I've got customers"? I can review your plans, or, given your constraints and objectives I can put together a suggested system architecture for you.

It's worth noting that I don't have a personal axe to grind here. I won't tell you to use a "clean" architecture because that's my thing, or to use microservices because they are fashionable. Different architectural styles exist for a reason, and each has its own trade offs in terms of constraints you choose to accept in order to gain certain benefits.

I have the advantage of having helped architect and design solutions in a variety of styles in production environments.

This is a bit of a hybrid service that includes aspects of [[Technology evaluation][technology evaluation]], [[Code audit][code audit]], and [[Technology evaluation][technology evaluation]] but zoomed out to look at "how do I put this all together."

** Code audit
:PROPERTIES:
:ID:       B7BDA429-6D17-46FD-B712-86B750E1C3A9
:END:

For ecosystems I've built decent sized projects in (.NET, TypeScript) I can spend some time reviewing your code and pointing out things you may want to improve.

This isn't the kind of code review you'd do on an individual PR: this is the kind of code review where I can (as an outsider) come in with fresh eyes and point out broader patterns in your code base that may be problematic. I can also help you take your conventions and "traditions" and turn them into a coding style guide with (in many cases) automated tooling to help the team put it into practice.

** Technology evaluation
:PROPERTIES:
:ID:       E0CFE33C-7348-4459-A534-800B83DDE672
:END:

Considering buying a new service, picking up a new programming language, or changing to a new database library? I can do the research and evaluation you need based on your requirements. I've been helping drive technology choices in organizations for well over a decade now, and I can help you spot the good, the bad, and the ugly of the options you're considering. I may even be aware of options you haven't considered.

** Workshops and training
:PROPERTIES:
:ID:       B449656A-0147-4077-B201-3DE4B6D15154
:END:

Unlike more general consultancy, workshops on topics I know well such as the ones below are a fairly fixed commitment. If you're considering using your training budget, you can assume around 2500 euros/day for up to 6 people online. In person will increase the cost but allows for groups of up to 10 people.

I have also offered bespoke training courses in the past (examples: giving a team of Ruby developers a 5 day crash course in everything they needed to know to take over maintenance of a .NET code base, tailored to the project in question) but that requires significant preparation and a quote.

** Domain driven design coaching
:PROPERTIES:
:ID:       DB44E6D2-DCF4-4997-B326-5B4E4D0B89C4
:END:

At its heart, the promise of domain driven design is simple: a code base that uses the same language as the people using it do, so that developers and domain experts can accurately share understanding of what the code /should/ do and why.

Actually /doing/ domain driven design is not simple at all, because it is a process to help you model reality and it turns out [[http://johnsalvatier.org/blog/2017/reality-has-a-surprising-amount-of-detail][reality has a surprising amount of detail]].

I can help with the process of getting started with DDD, help lead the early exploratory meetings between developers and domain experts, and give advice on how to capture what you discover in code while keeping everything maintainable.

** Event sourcing
:PROPERTIES:
:ID:       F06E5183-9787-4C2F-8473-7013F31998F2
:END:

Event sourcing is a technique for capturing all the events that "have happened" and using those to calculate the current state of your system.

For example, if a customer of yours moves you may publish a ~CustomerHasMoved~ event when they tell you, and a ~CustomerAddressHasChanged~ event when you have finished the business process that manages customers moving.

This has enormous benefits for auditing, for being able to look at how the system has changed over time, and for being able to fix bugs "retroactively" as you don't only have the current state of the system but also all of the steps that got you here.

It /also/ requires a slightly different way of thinking about your code base and some specific tooling to avoid a system that slows down over time. And it affects how you think about business constraints like data retention and [[https://www.dataprotection.ie/en/individuals/know-your-rights/right-erasure-articles-17-19-gdpr][the right to erasure]].

As the saying goes: been there, done that. I can help you do it too.

** Teach property based testing
:PROPERTIES:
:ID:       C4BBFDE6-9DAC-472E-9B19-7A48317298E8
:END:

I'm a huge fan of property based testing, and I'm more than happy to give interactive workshops on getting started with it in .NET, TypeScript, and probably other languages if you ask nicely. Why pay for this when you could download a conference talk about it for free (including ones I've given myself)? Because I'll use a piece of /your/ code to get started with you will walk away with an up and running example in your code base. This will keep us focused on the reality of doing property based testing in practice rather than seeing the nice, easy, examples you tend to be shown in a 45 minute talk.

** Bespoke software creation
:PROPERTIES:
:ID:       5C2368F7-FFF8-4E88-9B01-16F680934A58
:END:

** Build a tool/library
:PROPERTIES:
:ID:       E7E0899B-3812-47AF-8F1B-DE29456F500E
:END:

I do just write good code as well. If you need a self contained library or a small solution built, I can do that for you. Whether it is parsing an obscure data format, efficient immutable directed graph data structures, or just a nice F# wrapper around a dotnet library, I will make sure it fits the style you're asking for and is well tested. Significant discounts apply if the results are going to be released under an open source licence.

** Build a project skeleton
:PROPERTIES:
:ID:       3AC61BA9-2E22-4737-9FCE-ADA321234F5E
:END:

If you're starting a green field project, I can create a "skeleton" repository with a managed developer environment, CI/CD and testing story set up and ready to use. You and your team get to start with actually writing your product.

** Logistics
:PROPERTIES:
:ID:       1AC24D36-F2CC-4484-B158-758BFABCCFAB
:END:

Let's cover the basics. I don't want us to waste time, so I'm going to try and keep this as straight forward as possible:

** I will /always/ want to have an extensive conversation(s) and will normally want to provide a quote before starting a short term piece of work. Book a slot to talk on [[https://calendly.com/mavnn/1-hour-slot][Calendly]] or just send me an email (michael at mavnn.eu)
:PROPERTIES:
:ID:       0193B205-7DE2-4A13-B3D1-E456422A8BCA
:END:
** I currently live in Italy, about an hour away from Rome. I can offer all of the services above remotely. Asking me to attend in person will add travel costs and at least 2 billable days of my time.
:PROPERTIES:
:ID:       BB870713-994D-454A-AC72-B427D6F85FA0
:END:
** You can hire me by the day, but in general for short term work I quote and then charge you for the work delivered rather than bill by unit time. I will consider discounts for non-profits, student organizations, etc. It it's easier for you, I can give a quote that includes all expenses rather than reclaiming them separately. (Hint: if you're in a large organization and this is the first time you're arranging to get a consultant in - /this will be easier for you/)
:PROPERTIES:
:ID:       2392E295-DCA6-4350-859A-4BB99066507B
:END:
*** I am VAT registered in the EU
:PROPERTIES:
:ID:       42D4BDDE-ACC4-4FD1-86F0-93D2CB85E9F1
:END:
** In the rare occasion where it turns out that I cannot deliver what I promised (I'm just one human - things like illness can happen) I will let you know promptly, and before the work is due to be delivered, so we can renegotiate where to go from the reality of the situation.
:PROPERTIES:
:ID:       3D3414C1-CB9D-4942-BFA3-D5B00F8BF14A
:END:

That's about everything, I think.
* Writing CVs for more senior roles
:PROPERTIES:
:RSS_PERMALINK: 2024/01/26/writing_a_cv.html
:PUBDATE: 2024-01-26
:ID:       F5A45D41-C368-4C39-B911-840643D83C83
:END:
A while back (/checks notes, gulps/) I wrote a fairly successful [[https://blog.mavnn.co.uk/good-developer-cvs/][blog post on the types of CVs]] I liked receiving as one of the people screening technical applications, and some of the mistakes I was seeing applicants making.

What I didn't speak about at all was the "structure" of the CV; how to arrange it, and what sections to include/not include.

Today somebody asked me for an actual CV for the first time in... quite a while actually. The last couple of jobs both had their own interview process that didn't include one, so that means it's been at least 5 years.

Turns out that having been on the other side of the table a few more times now, and hiring for more senior candidates, my CV creation style has changed radically. The result is four broad categories of ways I've been effective in previous jobs, with a brief description of when I became senior enough to start doing that. So rather than having a big timeline of work history and education, I end up with things like:

#+begin_quote
*Training and mentoring*

For over a decade I have provided mentoring and training both to team members and as a service offered. This has ranged from people learning to code for the first time (CodeInstitute), to week long courses teaching professional developers new programming languages or architectural styles (@mavnn ltd), to giving talks at conferences on topics from the obscure to the philosophical (SDDConf, NDC, F# Exchange, Lambda Days, etc).

Apart from formal training I have mentored teams several times during the introduction of new programming languages, libraries, and techniques (15below, NoRedInk, Blissfully/Vendr).
#+end_quote

Again - your mileage may vary; it's not like I've had any feed back on the application yet, or even that a single response tells you much about how the CV be received in general. But I can tell you that from the other side of the table that I'm much more interested in what *you* think are the areas you've made a difference, or that you're proud of, than I am in the job descriptions of your last 5 posts and where you went to secondary school.

One slight caveat: I did include my LinkedIn profile, which has all the gritty dates and things. It just wasn't what I chose to highlight in the part of the process that I can control. Your CV is your chance to control the narrative - take it.
* TypeScript Enums and Serialization
:PROPERTIES:
:RSS_PERMALINK: 2022/11/24/typescript_enums_and_serialization.html
:PUBDATE: 2024-01-24
:ID:       5B56C5CD-D403-41ED-9BD7-023EE6F65433
:END:
#+index: TypeScript!Deserializing enums safely

In general, TypeScript is [[file:../../../2022/01/07/types-in-typescript.org][not its own language]] - it's a set of annotations that
can be added to JavaScript to help check the "correctness" of you program. The
authors have been very reluctant to add features to TypeScript that don't exist
in JavaScript, and so normally you can turn your TypeScript into JavaScript purely
by /deleting/ the type annotations that you've added.

Enums, though, are a bit different. They actually generate JavaScript code based on
the TypeScript you write. Today, we're going to look at a piece of code that allows
you to deserialize enums with string values in a type safe manner. And we're going
to take advantage of the fact that enums (according to the TypeScript compiler) are
both a type, and a value with a different type - at the same time.

For context, we're going to be using [[https://www.npmjs.com/package/schemawax][SchemaWax]] to create our decoder, so we can
build it into a larger contextual decoder as needed.

First: the code! If you already know SchemaWax, you don't care about types, and
you're here because it was a hit for "deserialize any enum" on Google this is
the bit to cut and paste.

#+begin_src typescript
  import * as D from "schemawax"

  // This is only type safe if passed a Enum with string values.
  // I don't think there's anyway to stop someone passing { "boo": "broken" }
  // in TypeScripts type system :(
  // At least this stops us from rewriting the same unsafe code every time though.
  export const stringEnumDecoder = <Enum extends { [name: string]: string }>(
    targetEnum: Enum,
  ): D.Decoder<Enum[keyof Enum]> => D.literalUnion(...Object.values(targetEnum)) as D.Decoder<Enum[keyof Enum]>
#+end_src

That's it. The whole thing. How do you use it?

Like this:

#+begin_src typescript
  import * as D from "schemawax"
  import { stringEnumDecoder } from "./enum"

  enum TestEnum1 {
    "why" = "would",
    "anyone" = "do",
    "this" = "!",
  }

  type ObjectWithEnumField = {
    testEnum: TestEnum1
    name: string
    age?: number
  }

  describe("stringEnumDecoder", () => {
    it("decodes string enums", () => {
      const result = stringEnumDecoder(TestEnum1).forceDecode("!")
      expect(result).toEqual(TestEnum1.this)
    })
    it("rejects invalid enum values", () => {
      const result = stringEnumDecoder(TestEnum1).decode("this")
      expect(result).toBeNull()
    })

    it("can be used in larger decoders", () => {
      const objectDecoder: D.Decoder<ObjectWithEnumField> = D.object({
        required: {
          testEnum: stringEnumDecoder(TestEnum1),
          name: D.string,
        },
        optional: {
          dateOfBirth: D.string.andThen((str) => new Date(str)),
        },
      })

      const inputFromApi = `{ "testEnum": "!", "name": "bob", "dateOfBirth": "2022-11-24"}`
      const result1 = objectDecoder.decode(JSON.parse(inputFromApi))
      expect(result1).toEqual({ testEnum: TestEnum1.this, name: "bob", dateOfBirth: new Date("2022-11-24") })
    })
  })
#+end_src

How does this work? How can we write a function that can take an enum type as an
argument, and then generate a decoder? (Feel free to drop out if you were just
here to solve your immediate problem!)

If you type an enum into the online TypeScript playground ([[https://www.typescriptlang.org/play?#code/KYOwrgtgBAYg9nKBvAUFKB5EwoF4oBEc2BANGlACoDui+BALrWSgL4pA][here's one I prepared
earlier]]), you'll see that the enum (with string values) is, in fact, compiled
into a variable that ends up with a simple record with string keys and values
attached to it.

Going back to the implementation, you'll see that's exactly the constraint on
the argument we pass into ~stringEnumDecoder~.

#+begin_src typescript
  ...
  export const stringEnumDecoder = <Enum extends { [name: string]: string }>(... rest of implementation)
#+end_src

Then some slightly weird magic happens: when you pass an enum into the function,
the TypeScript compiler infers that the type of the argument is the ~typeof~ the
enum you passed in. Whatever is happening internally here, it keeps track of the
fact that the keys of this type are the types of the valid enum cases, so it
turns ~Enum[keyof Enum]~ into the union type of each of the possible enum value
types which is, if you squint hard enough, actually the enum itself. We then
return a decoder that accepts a string, checks that said string is actually one
of the /values/ stored in the enum object, and then tells the compiler that this
decoder will only ever return valid enum values. Unfortunately with a cast - but
the full context we need to check this cast is valid is contained within this
one line of code.

So there you have it: a safe way to deserialize strings into enums, and it even
composes nicely into more complex decoders.

Until next time!

Want to comment on something you've read here? [[https://mastodon.sdf.org/@mavnn/109400451463740531][This mastodon post]] is the
official commenting point!
* ADHD and me
:PROPERTIES:
:RSS_PERMALINK: 2022/10/14/adhd_and_me.html
:PUBDATE: 2022-10-14
:ID:       9304EB72-CB70-42C5-A824-9529720558AD
:END:
This morning, I did the washing up.

Now: your first response might be "Michael: why do I care? Do I look like a
washing up blog reader?"

But that would miss the point. This morning I did the washing up, and only the
washing up. I didn't procrastinate with some Twitter or YouTube videos first. I
didn't need to listen to a podcast at the same time to avoid getting lost
staring off into space thinking about something completely different.

Most importantly: no crushing feeling of overwhelm about needing to do this task
that both feels insurmountable but is obviously (objectively) trivial. It's
embarrassing to admit that I've been repeatedly reduced to tears by the need to
do the washing up.

This change, it appears, is the impact of methylphenidate (Ritalin®) on my
brain. I was recently diagnosed with ADHD, and yesterday I undertook a series of
"challenge tests" to see if I am one of the [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2732009/][75% of adult's with ADHD whose
symptoms are helped by the drug]].

I did the same series of tests twice: once in the morning, before taking
methylphenidate; the other in the afternoon an hour after taking the first trial
intake under observation (methylphenidate is a controlled substance here in
Italy).

It was a strange, and almost disturbing, experience to feel my brain acting
differently. Recall was smoother. Free association on a topic easier because my
brain stayed on /that/ topic, without veering away onto side lines that I needed
to filter out from what I was saying. My thoughts were still my own, but
with... less in the way.

You see: trying to do stuff (and by stuff I mean pretty much /anything/ that you
need to choose to do, rather than that you happen to start because it distracted
you...) with ADHD is hard. I didn't realize how hard until some of that effort
was lifted.

The closest I've come to being able to describe it is that having ADHD is like
your brain wearing an ancient near eastern tunic to work a farm.

Ever hear the phrase "gird your loins"? It's the [[https://www.artofmanliness.com/skills/manly-know-how/how-to-gird-up-your-loins-an-illustrated-guide/][process of tying up your tunic]]
(designed primarily to keep you cool) so that you can run, or fight, or carry
out hard physical labour at ground level without the 'skirt' of the tunic
getting in the way and tripping you up.

My brain wears a tunic: I need to put effort into preparing to do things before
I can even start doing them. So it takes energy and effort just to /get ready to
start/. And if you make a mistake in the girding, or the knot slips? Well, now
you're half way through your task with a bunch of cloth swishing around your
legs and getting in the way.

Methylphenidate is the equivalent of putting on jeans.[fn:1] You can be casual still,
but you can also just... do stuff? Finish your morning coffee, look across the
kitchen, and go: "I need to do the washing up."

This morning, I did the washing up.

[fn:1] Very short lived jeans, at the moment. While slow release versions are
available, the version of methylphenidate used while experimenting to find the
ideal personal dose has an effect period of about 4-6 hours at the outside and
I'm only prescribed one dose a day. So I still get to wear a brain tunic in the
afternoons until I reach a stable enough dosage to take the slow release
version.
