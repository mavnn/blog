#+TITLE: Mavnn's blog

* A gentle introduction to Effect TS
:PROPERTIES:
:RSS_PERMALINK: 2024/09/16/intro_to_effect_ts.html
:PUBDATE: 2024-09-16
:ID:       86675698-1BDE-42AE-BB30-A0F24323163B
:END:
I've recently been writing TypeScript again in a green field project, and we made the decision to
use the [[https://effect.website/][Effect]] library. It's not a small decision to make: although you can use bits of Effect in
an existing code base, its real benefit is when it is used as (to quote the website) "the missing
standard library for TypeScript".

Overall, we're happy with the choice but the learning curve has a few sharp edges and while the
[[https://effect.website/docs/introduction][docs]] aren't bad it does feel like they could do a better job of introducing the most used features
in a way that feels familiar to TypeScript developers so they can at least *read existing* Effect
code before starting to introduce the many, many, powerful features that come with the library.

This post is an attempt to do exactly that.

** The Effect type
:PROPERTIES:
:ID:       793296DC-AE1B-44C8-B5D3-45FE062E7838
:END:

The very first thing you need to understand about Effect is that it is built around a specific type.
Appropriately enough, the ~Effect~ type. This type functions as a replacement for ~Promise~, allowing
for asynchronous code, but also covers a few other needs.

Let's get started, in the traditional way:

#+begin_src typescript
  import { Effect } from "effect"

  const hello = (name?: string): Effect.Effect<string> =>
    Effect.gen(function* () {
      return `Hello, ${name || "world"}!`
    })
#+end_src

This code is spiritually the same as writing:

#+begin_src typescript
  const helloAsync = async (name?: string): Promise<string> => {
    return `Hello, ${name || "world"}!`
  }
#+end_src

You can think of the ~Effect.gen(function* () { ... })~ as a slightly more verbose version of the ~async~ prefix to a function.

What about calling the function? Again, we have a similar concept but different syntax to ~async/await~.

#+begin_src typescript
  // Effect version
  const sayHello: Effect.Effect<void> =
    Effect.gen(function* () {
      const greeting = yield* hello("world")
      yield* sendGreetings(greeting)
    })

  // Async/await version
  const sayHelloAsync: Promise<void> = {
    const greeting = await helloAsync("world")
    await sendGreetingsAsync(greeting)
  }
#+end_src

Given that we're using a cooperative scheduling system for asynchronous code, you can think of ~yield*~ as
saying "hey runtime - I'm yielding the thread now, start me back up when the effect on the right has finished."

There is, however one big difference between these two which will catch you out if you don't know about it.

** Hot and cold promises
:PROPERTIES:
:ID:       C0FAD998-0E70-43DA-B2D0-2BBD2E957433
:END:

~Promise~ is what is sometimes referred to as a "hot" or "immediate" asynchronous construct. What does that mean?

Well, in the example above ~sayHelloAsync~ is a constant value. As soon as the value is created, the logic within
the promise will be scheduled for execution and we will start the process of asynchronously running the ~helloAsync~
function. If we await the result of ~sayHelloAsync~ somewhere else, we will block until the function has finished.

This also means that if we ~await~ ~sayHelloAsync~ in two different places, we will only send greetings *once*. After
all, the ~Promise~ type that we are handing around represents the running execution of an asynchronous process; it has
already started, and awaiting it multiple times won't start it again.

~Effect~, by contrast, is a "cold" or "thunked" asynchronous construct. It represents a series of steps that /will be/
executed /if/ the result is requested.

So if we run:

#+begin_src typescript
  const camelot: Effect.Effect<void> =
    Effect.gen(function* () {
      yield* sayHello
      yield* sayHello
      yield* sayHello
    })
#+end_src

We will send the greetings three times, but only when somebody requests the result of running ~camelot~. Until
then, nothing will happen at all.

*If you remember nothing else from this post*, remember that an ~Effect~ that nobody executes never runs. This /will/ catch you
out with logging.

#+begin_src typescript
  // logs nothing
  const camelot: Effect.Effect<void> =
    Effect.gen(function* () {
      Effect.log("Bass voice: spam a looooooot")
      yield* sayHello
      yield* sayHello
      yield* sayHello
    })

  // logs the bass voice
  const camelot: Effect.Effect<void> =
    Effect.gen(function* () {
      yield* Effect.log("Bass voice: spam a looooooot")
      yield* sayHello
      yield* sayHello
      yield* sayHello
    })
#+end_src

Although the ability to create Effects without executing them can be extremely useful, leaving ~yield*~ out of
your code when you actually need it is probably the most frustrating element of learning Effect, and the one
that the compiler is least able to warn you about.

** Pipes
:PROPERTIES:
:ID:       B9A98B79-491D-4373-BBC8-6AF82433C1DD
:END:

Effect makes heavy usage of a concept it calls "pipes", which is a way of passing a value through a series of functions.

The main place you'll see this is that we can wrap ~Effect~ values in a wide variety of ways. These are very powerful,
but quickly start suffering from the "lisp effect" of a pyramid of brackets when we start combining them.

Let's rewrite the ~camelot~ function above using the built in ~Effect.repeatN~ method:

