#+TITLE: Mavnn's blog

* Short term help
:PROPERTIES:
:RSS_PERMALINK: 2024/01/25/short_term_help.html
:PUBDATE: 2024-01-25
:ID:       A7938FA9-F296-4D18-A795-A3CA1A0C8655
:END:
These days I generally work longer term contracts, which means I'm not often available for the more immediate "pay money for a solved problem" services I could offer while I was consulting. Right now though, I'm between long term contracts.

"But Michael," I hear you say, "what problems can I give you money to solve to avoid distracting my own amazing team from actually *building the product*?"

I'm so glad you asked. Or, you know, you can just skip straight to the [[Logistics][logistics]] section if you already know what you want.

#+toc: headlines 2

** The kinds of things I can do for you
:PROPERTIES:
:ID:       DB80D665-EBCD-4720-83E6-1E4BB4525C9F
:END:

** Build, packaging, and continuous integration
:PROPERTIES:
:ID:       25636E7B-ED2A-481D-B3A6-A1048B24198E
:END:

I have spent a /lot/ of time getting build, test, and deployment pipelines up and running. A lot of the advice out there assumes you are using one technology and that you can just use "the build tool" for that stack. Reality tends to be more complicated than that, with many projects involving multiple languages, code generation, and extensive test set up.

What kind of things would a CI/CD process I help build give you? It depends on /your/ needs, but things that have really helped in other places include:

** Making sure that CI/CD is managed *in the code repository* so that running the build locally and on the build server does the same thing in the same way, and the build can evolve in a safe, version controlled way just like all your other code
:PROPERTIES:
:ID:       FCD683E3-72F5-4E1A-BE22-CC492F5D75BE
:END:
** Helping trace and encode the /real/ dependencies in your code base to unlock incremental, cachable build steps and reduce overall build times with concurrency
:PROPERTIES:
:ID:       94A86732-4CB3-498A-A76D-CD99143B69D9
:END:
** Split your test suite so tests can be run in parallel (yes, even integration tests) and then aggregate the results
:PROPERTIES:
:ID:       6298BA6C-DBF0-419C-A490-51A1A8461F7C
:END:
** Use tools like Nix or multi-step docker/podman builds to create minimal containers that only contain what they really need
:PROPERTIES:
:ID:       B69634B8-350A-4021-9762-2A415B8321E8
:END:
*** bonus extra: doing this with Nix also gives you development environments as code and reproducible deployment artifacts - same code in, same container out
:PROPERTIES:
:ID:       D9A97BFB-0EAA-4F23-A664-6D1D1C80263D
:END:

** Architecture review
:PROPERTIES:
:ID:       4442EA6F-E594-4364-B763-39A8BF6ECA58
:END:

Putting together a new project, or have a code base that's moving from "minimum viable" to "oh - I've got customers"? I can review your plans, or, given your constraints and objectives I can put together a suggested system architecture for you.

It's worth noting that I don't have a personal axe to grind here. I won't tell you to use a "clean" architecture because that's my thing, or to use microservices because they are fashionable. Different architectural styles exist for a reason, and each has its own trade offs in terms of constraints you accept to gain certain benefits.

This is a bit of a hybrid service that includes aspects of [[Technology evaluation][technology evaluation]], [[Code review][code review]], and [[Domain driven design coaching][domain driven design coaching]] but zoomed out to look at "how do I put this all together."

** Code review
:PROPERTIES:
:ID:       8B0F1B22-E3B8-4D9D-9FE4-AF02A3266B27
:END:

For ecosystems I've built decent sized projects in (.NET, TypeScript) I can spend some time reviewing your code and pointing out things you may want to improve.

This isn't the kind of code review you'd do on an individual PR: this is the kind of code review where I can (as an outsider) come in with fresh eyes and point out broader patterns in your code base that may be problematic. I can also help you take your conventions and "traditions" and turn them into a coding style guide with (in many cases) automated tooling to help the team put it into practice.

** Technology evaluation
:PROPERTIES:
:ID:       9C8A385D-B2F1-4248-8E0E-57EC81D9FC47
:END:

Considering buying a new service, picking up a new programming language, or changing to a new database library? I can do the research and evaluation you need: I've been helping drive technology choices in organizations for well over a decade now and can help you spot the good, the bad, and the ugly of the options you're considering.

** Domain driven design coaching
:PROPERTIES:
:ID:       457FA588-F0C2-4EE9-8F66-12BEF93CCB57
:END:

At its heart, the promise of domain driven design is simple: a code base that uses the same language as the people using it do, so that developers and domain experts can accurately share understanding of what the code /should/ do and why.

Actually /doing/ domain driven design is not simple at all, because it is a process to help you model reality and it turns out [[http://johnsalvatier.org/blog/2017/reality-has-a-surprising-amount-of-detail][reality has a surprising amount of detail]].

I can help with the process of getting started with DDD, help lead the early exploratory meetings between developers and domain experts, and give advice at how to capture what you discover in code while keeping everything maintainable.

** Event sourcing
:PROPERTIES:
:ID:       1EB001DE-C37C-46FD-911C-131A9C5E86A3
:END:

Event sourcing is a technique for capturing all the events that "have happened" and using those to calculate the current state of your system.

For example, if a customer of yours moves you may publish a ~CustomerHasMoved~ event when they tell you, and a ~CustomerAddressHasChanged~ event when you have finished the business process that manages customers moving.

This has enormous benefits for auditing, for being able to look at how the system has changed over time, and for being able to fix bugs "retroactively" as you don't only have the current state of the system but also all of the steps that got you here.

It /also/ requires a slightly different way of thinking about your code base and some specific tooling to avoid a system that slows down over time. And it affects how you think about business constraints like data retention and [[https://www.dataprotection.ie/en/individuals/know-your-rights/right-erasure-articles-17-19-gdpr][the right to erasure]].

As the saying goes: been there, done that. I can help you do it too.

** Teach property based testing
:PROPERTIES:
:ID:       92501C25-CC36-4DF3-99F3-6EEB79E7D84C
:END:

I'm a huge fan of property based testing, and I'm more than happy to give interactive workshops on getting started with it in .NET, TypeScript, and probably other languages if you ask nicely. Why pay for this when you could download a conference talk about it for free (including ones I've given myself)? Because I'll use a piece of /your/ code to get started with, so that you walk away with an up and running example in your code base and we all talk about the reality of doing this rather than seeing the nice, easy, examples you tend to be shown in a 45 minute talk.

** Build a tool/library
:PROPERTIES:
:ID:       0A7F4FEE-AF14-4448-AF17-1DBE2DE9D63F
:END:

I do just write good code as well. If you need a self contained library or a small solution built, I can do that for you.

** Logistics
:PROPERTIES:
:ID:       4975BB51-14E7-4F45-95E7-BF2ECCAF13BE
:END:

Let's cover the basics. Neither of us has time to waste, so I'm going to keep this blunt and simple:

** I will /always/ want to have an extensive conversation(s) and will normally want to provide a quote before starting a short term piece of work. Book a slot to talk on [[https://calendly.com/mavnn/1-hour-slot][Calendly]] or just send me an email (michael at mavnn.eu)
:PROPERTIES:
:ID:       E7B3E7EC-82E8-4F9B-BE98-28CD773B1147
:END:
** I currently live in Italy, about an hour away from Rome. I can offer all of the services above remotely. Asking me to attend in person will add travel costs and at least 2 billable days of my time. Note: in some situations this is totally worthwhile.
:PROPERTIES:
:ID:       C214C7B4-1FB7-44A9-86E1-6D75B3937D9D
:END:
** My day rate runs at 1000 euros per day for short term work like this, but in general I will use that to generate a quote and then charge you for the work delivered rather than bill by unit time. I never bill by the hour; I will consider discounts for non-profits, educational sites, friends, etc. It it's easier for you, I can give a quote that includes all expenses (travel etc) rather than reclaiming them separately. (Hint: if you're in a large organization and this is the first time you're arranging to get a consultant in - /this will be easier for you/)
:PROPERTIES:
:ID:       45138DF1-DDDE-456E-AB47-B6AF694289CA
:END:
*** If you are in the EU, note that I am VAT registered
:PROPERTIES:
:ID:       25712859-9D42-4631-BA83-4AD1A5E54894
:END:
** In the rare occasion where it turns out that I cannot deliver what I promised (I'm just one human - things like illness can happen) I will let you know promptly, and before the work is due to be delivered, so we can renegotiate where to go from the reality of the situation.
:PROPERTIES:
:ID:       4646E3BB-86A6-4FB0-A836-C9EEB36CF896
:END:

That's about everything, I think.
* TypeScript Enums and Serialization
:PROPERTIES:
:RSS_PERMALINK: 2022/11/24/typescript_enums_and_serialization.html
:PUBDATE: 2024-01-24
:ID:       974CADE3-6FCB-4B05-8A1B-C74AFF022D6E
:END:
#+index: TypeScript!Deserializing enums safely

In general, TypeScript is [[file:../../../2022/01/07/types-in-typescript.org][not its own language]] - it's a set of annotations that
can be added to JavaScript to help check the "correctness" of you program. The
authors have been very reluctant to add features to TypeScript that don't exist
in JavaScript, and so normally you can turn your TypeScript into JavaScript purely
by /deleting/ the type annotations that you've added.

Enums, though, are a bit different. They actually generate JavaScript code based on
the TypeScript you write. Today, we're going to look at a piece of code that allows
you to deserialize enums with string values in a type safe manner. And we're going
to take advantage of the fact that enums (according to the TypeScript compiler) are
both a type, and a value with a different type - at the same time.

For context, we're going to be using [[https://www.npmjs.com/package/schemawax][SchemaWax]] to create our decoder, so we can
build it into a larger contextual decoder as needed.

First: the code! If you already know SchemaWax, you don't care about types, and
you're here because it was a hit for "deserialize any enum" on Google this is
the bit to cut and paste.

#+begin_src typescript
  import * as D from "schemawax"

  // This is only type safe if passed a Enum with string values.
  // I don't think there's anyway to stop someone passing { "boo": "broken" }
  // in TypeScripts type system :(
  // At least this stops us from rewriting the same unsafe code every time though.
  export const stringEnumDecoder = <Enum extends { [name: string]: string }>(
    targetEnum: Enum,
  ): D.Decoder<Enum[keyof Enum]> => D.literalUnion(...Object.values(targetEnum)) as D.Decoder<Enum[keyof Enum]>
#+end_src

That's it. The whole thing. How do you use it?

Like this:

#+begin_src typescript
  import * as D from "schemawax"
  import { stringEnumDecoder } from "./enum"

  enum TestEnum1 {
    "why" = "would",
    "anyone" = "do",
    "this" = "!",
  }

  type ObjectWithEnumField = {
    testEnum: TestEnum1
    name: string
    age?: number
  }

  describe("stringEnumDecoder", () => {
    it("decodes string enums", () => {
      const result = stringEnumDecoder(TestEnum1).forceDecode("!")
      expect(result).toEqual(TestEnum1.this)
    })
    it("rejects invalid enum values", () => {
      const result = stringEnumDecoder(TestEnum1).decode("this")
      expect(result).toBeNull()
    })

    it("can be used in larger decoders", () => {
      const objectDecoder: D.Decoder<ObjectWithEnumField> = D.object({
        required: {
          testEnum: stringEnumDecoder(TestEnum1),
          name: D.string,
        },
        optional: {
          dateOfBirth: D.string.andThen((str) => new Date(str)),
        },
      })

      const inputFromApi = `{ "testEnum": "!", "name": "bob", "dateOfBirth": "2022-11-24"}`
      const result1 = objectDecoder.decode(JSON.parse(inputFromApi))
      expect(result1).toEqual({ testEnum: TestEnum1.this, name: "bob", dateOfBirth: new Date("2022-11-24") })
    })
  })
#+end_src

How does this work? How can we write a function that can take an enum type as an
argument, and then generate a decoder? (Feel free to drop out if you were just
here to solve your immediate problem!)

If you type an enum into the online TypeScript playground ([[https://www.typescriptlang.org/play?#code/KYOwrgtgBAYg9nKBvAUFKB5EwoF4oBEc2BANGlACoDui+BALrWSgL4pA][here's one I prepared
earlier]]), you'll see that the enum (with string values) is, in fact, compiled
into a variable that ends up with a simple record with string keys and values
attached to it.

Going back to the implementation, you'll see that's exactly the constraint on
the argument we pass into ~stringEnumDecoder~.

#+begin_src typescript
  ...
  export const stringEnumDecoder = <Enum extends { [name: string]: string }>(... rest of implementation)
#+end_src

Then some slightly weird magic happens: when you pass an enum into the function,
the TypeScript compiler infers that the type of the argument is the ~typeof~ the
enum you passed in. Whatever is happening internally here, it keeps track of the
fact that the keys of this type are the types of the valid enum cases, so it
turns ~Enum[keyof Enum]~ into the union type of each of the possible enum value
types which is, if you squint hard enough, actually the enum itself. We then
return a decoder that accepts a string, checks that said string is actually one
of the /values/ stored in the enum object, and then tells the compiler that this
decoder will only ever return valid enum values. Unfortunately with a cast - but
the full context we need to check this cast is valid is contained within this
one line of code.

So there you have it: a safe way to deserialize strings into enums, and it even
composes nicely into more complex decoders.

Until next time!

Want to comment on something you've read here? [[https://mastodon.sdf.org/@mavnn/109400451463740531][This mastodon post]] is the
official commenting point!
* ADHD and me
:PROPERTIES:
:RSS_PERMALINK: 2022/10/14/adhd_and_me.html
:PUBDATE: 2022-10-14
:ID:       6ACB5373-1318-47FD-950B-5CAD7CF4E1A6
:END:
This morning, I did the washing up.

Now: your first response might be "Michael: why do I care? Do I look like a
washing up blog reader?"

But that would miss the point. This morning I did the washing up, and only the
washing up. I didn't procrastinate with some Twitter or YouTube videos first. I
didn't need to listen to a podcast at the same time to avoid getting lost
staring off into space thinking about something completely different.

Most importantly: no crushing feeling of overwhelm about needing to do this task
that both feels insurmountable but is obviously (objectively) trivial. It's
embarrassing to admit that I've been repeatedly reduced to tears by the need to
do the washing up.

This change, it appears, is the impact of methylphenidate (Ritalin®) on my
brain. I was recently diagnosed with ADHD, and yesterday I undertook a series of
"challenge tests" to see if I am one of the [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2732009/][75% of adult's with ADHD whose
symptoms are helped by the drug]].

I did the same series of tests twice: once in the morning, before taking
methylphenidate; the other in the afternoon an hour after taking the first trial
intake under observation (methylphenidate is a controlled substance here in
Italy).

It was a strange, and almost disturbing, experience to feel my brain acting
differently. Recall was smoother. Free association on a topic easier because my
brain stayed on /that/ topic, without veering away onto side lines that I needed
to filter out from what I was saying. My thoughts were still my own, but
with... less in the way.

You see: trying to do stuff (and by stuff I mean pretty much /anything/ that you
need to choose to do, rather than that you happen to start because it distracted
you...) with ADHD is hard. I didn't realize how hard until some of that effort
was lifted.

The closest I've come to being able to describe it is that having ADHD is like
your brain wearing an ancient near eastern tunic to work a farm.

Ever hear the phrase "gird your loins"? It's the [[https://www.artofmanliness.com/skills/manly-know-how/how-to-gird-up-your-loins-an-illustrated-guide/][process of tying up your tunic]]
(designed primarily to keep you cool) so that you can run, or fight, or carry
out hard physical labour at ground level without the 'skirt' of the tunic
getting in the way and tripping you up.

My brain wears a tunic: I need to put effort into preparing to do things before
I can even start doing them. So it takes energy and effort just to /get ready to
start/. And if you make a mistake in the girding, or the knot slips? Well, now
you're half way through your task with a bunch of cloth swishing around your
legs and getting in the way.

Methylphenidate is the equivalent of putting on jeans.[fn:1] You can be casual still,
but you can also just... do stuff? Finish your morning coffee, look across the
kitchen, and go: "I need to do the washing up."

This morning, I did the washing up.

[fn:1] Very short lived jeans, at the moment. While slow release versions are
available, the version of methylphenidate used while experimenting to find the
ideal personal dose has an effect period of about 4-6 hours at the outside and
I'm only prescribed one dose a day. So I still get to wear a brain tunic in the
afternoons until I reach a stable enough dosage to take the slow release
version.
* Teaching (coding) wisdom
:PROPERTIES:
:RSS_PERMALINK: 2022/06/20/teaching-coding-wisdom.html
:PUBDATE: 2022-06-20
:ID:       7F515D37-CC16-469C-9F75-88C0A6BBE28F
:END:
#+begin_quote
[talking about the teaching of wisdom]

There are these distillations that we get throughout the story, like in the ten commandments or in the Sermon on the Mount. At points, it’s very clear: “Don’t murder.” “Honor your ma and pa.” “Do to others what you want them to do to you.” But if you really think about it, you don’t want a list. You might want a list for a certain season that will train your moral compass. Then, when you confront really complex situations, like Joshua or Moses, and it’s not clear, and there’s no list, you’ve been shaped to be the kind of person who knows how to figure out the right way forward. Lists will not help you do that. Wisdom will help you do that.

--- https://bibleproject.com/podcast/wisdom-lifes-complexity/
#+end_quote

Listening to the podcast above earlier and thinking that it feels very similar to how to teach good coding practices. We use the short hand of rules, and lists of recommendations… sometimes. But that doesn’t teach you how to deal with the complex situations, the edge cases, the actual real problems that need solving.

The flip side being that as soon as you’re guided by wisdom, by the stories of what works, the shaping of thinking, you start getting into interpretation and ambiguity because you’re actually needing to think about the decisions you’re making. It can become hard to explain why you’re doing things, and different experiences will have coloured the “wisdom” that you’ve formed over the years. Which is why it becomes so important to have a variety of backgrounds and a willingness to communicate in a technical team that’s actually going to get things done. Why the lists and rules (microservices rule the world! TDD is the one true way! pure code is the only real code!) only get you so far, and should be starting points - not ending points.

If you'd like to comment on this post, or suggest a correction, you can [[https://github.com/mavnn/blog/blob/master/2022/06/20/teaching-coding-wisdom.org][submit suggestions for changes]] (GitHub account required). Just hit the "edit this file button" and go from there - or log an issue on the repository.
